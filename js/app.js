// –£–ö –ó–µ–ª—ë–Ω–∞—è –î–æ–ª–∏–Ω–∞ - –û—Å–Ω–æ–≤–Ω–æ–π JavaScript

class ZelenayaDolinaApp {
    constructor() {
        this.currentSection = 'dashboard';
        this.isOnline = navigator.onLine;
        this.init();
    }

    init() {
        console.log('üè† –£–ö –ó–µ–ª—ë–Ω–∞—è –î–æ–ª–∏–Ω–∞ - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
        
        // Hide loading screen and show app
        setTimeout(() => {
            this.hideLoadingScreen();
            this.showApp();
        }, 2000);

        // Setup event listeners
        this.setupEventListeners();
        
        // Setup network monitoring
        this.setupNetworkMonitoring();
        
        console.log('‚úÖ –£–ö –ó–µ–ª—ë–Ω–∞—è –î–æ–ª–∏–Ω–∞ - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ');
    }

    hideLoadingScreen() {
        const loadingScreen = document.getElementById('loading-screen');
        if (loadingScreen) {
            loadingScreen.style.opacity = '0';
            setTimeout(() => {
                loadingScreen.style.display = 'none';
            }, 500);
        }
    }

    showApp() {
        const app = document.getElementById('app');
        if (app) {
            app.style.display = 'block';
        }
    }

    setupEventListeners() {
        // Navigation buttons
        document.querySelectorAll('.nav-item').forEach(button => {
            button.addEventListener('click', (e) => {
                const section = e.currentTarget.dataset.section;
                this.showSection(section);
            });
        });

        // Request form submission
        const requestForm = document.getElementById('requestForm');
        if (requestForm) {
            requestForm.addEventListener('submit', (e) => {
                e.preventDefault();
                this.submitRequest();
            });
        }

        // Quick action buttons
        document.querySelectorAll('.action-btn').forEach(button => {
            button.addEventListener('click', (e) => {
                const action = e.currentTarget.textContent.trim();
                this.handleQuickAction(action);
            });
        });
    }

    setupNetworkMonitoring() {
        window.addEventListener('online', () => {
            this.isOnline = true;
            this.updateNetworkStatus('online');
            console.log('üåê –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        });

        window.addEventListener('offline', () => {
            this.isOnline = false;
            this.updateNetworkStatus('offline');
            console.log('üì± –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É –ø–æ—Ç–µ—Ä—è–Ω–æ');
        });

        // Initial network status
        this.updateNetworkStatus(this.isOnline ? 'online' : 'offline');
    }

    updateNetworkStatus(status) {
        const networkStatus = document.getElementById('network-status');
        if (networkStatus) {
            networkStatus.className = `network-status ${status}`;
            networkStatus.querySelector('.status-text').textContent = 
                status === 'online' ? '–û–Ω–ª–∞–π–Ω' : '–û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º';
        }
    }

    showSection(sectionName) {
        // Hide all sections
        document.querySelectorAll('.content-section').forEach(section => {
            section.classList.remove('active');
        });

        // Remove active class from nav items
        document.querySelectorAll('.nav-item').forEach(item => {
            item.classList.remove('active');
        });

        // Show selected section
        const targetSection = document.getElementById(sectionName);
        if (targetSection) {
            targetSection.classList.add('active');
        }

        // Add active class to nav item
        const navItem = document.querySelector(`[data-section="${sectionName}"]`);
        if (navItem) {
            navItem.classList.add('active');
        }

        this.currentSection = sectionName;
        console.log(`üìä –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–∞–∑–¥–µ–ª—É: ${sectionName}`);
    }

    submitRequest() {
        const form = document.getElementById('requestForm');
        const formData = new FormData(form);
        
        const request = {
            type: formData.get('requestType') || document.getElementById('requestType').value,
            title: formData.get('requestTitle') || document.getElementById('requestTitle').value,
            description: formData.get('requestDescription') || document.getElementById('requestDescription').value,
            priority: formData.get('requestPriority') || document.getElementById('requestPriority').value,
            submittedDate: new Date().toLocaleDateString('ru-RU'),
            status: '–æ–∂–∏–¥–∞–µ—Ç',
            assignedTo: null,
            estimatedCompletion: null
        };

        console.log('üìù –ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏:', request);
        
        // Show success message
        alert('‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ! –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #' + Date.now());
        
        // Reset form
        form.reset();
    }

    handleQuickAction(action) {
        console.log('‚ö° –ë—ã—Å—Ç—Ä–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:', action);
        
        switch(action) {
            case '–û–ø–ª–∞—Ç–∏—Ç—å':
                this.showSection('payments');
                break;
            case '–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É':
                this.showSection('requests');
                break;
            case '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
                this.showSection('notifications');
                break;
            case '–ú–æ–∏ –∫–≤–∞—Ä—Ç–∏—Ä—ã':
                this.showSection('apartments');
                break;
        }
    }
}

// Global functions for HTML onclick handlers
function showSection(sectionName) {
    if (window.zelenayaDolinaApp) {
        window.zelenayaDolinaApp.showSection(sectionName);
    }
}

function downloadReceipt(receiptName) {
    console.log('üìÑ –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∫–≤–∏—Ç–∞–Ω—Ü–∏–∏:', receiptName);
    alert('üìÑ –ö–≤–∏—Ç–∞–Ω—Ü–∏—è —Å–∫–∞—á–∏–≤–∞–µ—Ç—Å—è: ' + receiptName);
}

function markAsPaid(paymentId) {
    console.log('‚úÖ –û—Ç–º–µ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω–æ–≥–æ:', paymentId);
    alert('‚úÖ –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–π!');
}

function markAsRead(notificationId) {
    console.log('‚úÖ –û—Ç–º–µ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ:', notificationId);
    alert('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ!');
}

function submitCounterReading(counterId) {
    console.log('üìä –ü–µ—Ä–µ–¥–∞—á–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π —Å—á–µ—Ç—á–∏–∫–∞:', counterId);
    alert('üìä –ü–æ–∫–∞–∑–∞–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –ø–µ—Ä–µ–¥–∞–Ω—ã!');
}

// Initialize app when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    window.zelenayaDolinaApp = new ZelenayaDolinaApp();
});

// Service Worker registration
if ('serviceWorker' in navigator) {
    window.addEventListener('load', () => {
        navigator.serviceWorker.register('sw.js')
            .then(registration => {
                console.log('‚úÖ Service Worker –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', registration.scope);
            })
            .catch(error => {
                console.log('‚ùå Service Worker —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å:', error);
            });
    });
}
