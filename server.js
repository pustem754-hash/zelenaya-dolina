/ –£–ö –ó–µ–ª—ë–Ω–∞—è –î–æ–ª–∏–Ω–∞ - –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è PWA
// –ù–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ —Å –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏
// –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∏–≤—è–∑–∫–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É IP –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å VPN

const http = require('http');
const fs = require('fs');
const path = require('path');
const os = require('os');

const PORT = process.env.PORT || 3000;

// –í–ê–®–ò IP –ê–î–†–ï–°–ê (–∏–∑–º–µ–Ω–∏—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
const WIFI_IP = '192.168.1.8'; // –í–∞—à IP –∏–∑ ipconfig (Wi-Fi –∞–¥–∞–ø—Ç–µ—Ä)

// MIME —Ç–∏–ø—ã
const MIME_TYPES = {
    '.html': 'text/html; charset=utf-8',
    '.js': 'text/javascript; charset=utf-8',
    '.css': 'text/css; charset=utf-8',
    '.json': 'application/json',
    '.png': 'image/png',
    '.jpg': 'image/jpeg',
    '.jpeg': 'image/jpeg',
    '.gif': 'image/gif',
    '.svg': 'image/svg+xml',
    '.ico': 'image/x-icon',
    '.webp': 'image/webp',
    '.woff': 'font/woff',
    '.woff2': 'font/woff2',
    '.ttf': 'font/ttf',
    '.eot': 'application/vnd.ms-fontobject'
};

// –ü–æ–ª—É—á–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π IP –∞–¥—Ä–µ—Å Wi-Fi
function getLocalIPAddress() {
    const interfaces = os.networkInterfaces();
    for (const name of Object.keys(interfaces)) {
        for (const iface of interfaces[name]) {
            // –ò—â–µ–º —Ç–æ–ª—å–∫–æ IPv4 –∞–¥—Ä–µ—Å–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ 192.168.1.x (–≤–∞—à–∞ –¥–æ–º–∞—à–Ω—è—è —Å–µ—Ç—å)
            if (iface.family === 'IPv4' && !iface.internal && iface.address.startsWith('192.168.1.')) {
                return iface.address;
            }
        }
    }
    return WIFI_IP; // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–¥–∞–Ω–Ω—ã–π –≤—Ä—É—á–Ω—É—é
}

// –°–æ–∑–¥–∞—Ç—å HTTP —Å–µ—Ä–≤–µ—Ä
const server = http.createServer((req, res) => {
    console.log(`üì± ${req.method} ${req.url}`);

    // –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
    let filePath = '.' + req.url;
    if (filePath === './') {
        filePath = './index.html';
    }

    // –ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    const extname = String(path.extname(filePath)).toLowerCase();
    const contentType = MIME_TYPES[extname] || 'application/octet-stream';

    // –ß–∏—Ç–∞—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª
    fs.readFile(filePath, (error, content) => {
        if (error) {
            if (error.code === 'ENOENT') {
                // –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω - –≤–µ—Ä–Ω—É—Ç—å index.html –¥–ª—è SPA —Ä–æ—É—Ç–∏–Ω–≥–∞
                fs.readFile('./index.html', (err, indexContent) => {
                    if (err) {
                        res.writeHead(500);
                        res.end('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + err.code);
                    } else {
                        res.writeHead(200, { 'Content-Type': 'text/html; charset=utf-8' });
                        res.end(indexContent, 'utf-8');
                    }
                });
            } else {
                // –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞
                res.writeHead(500);
                res.end('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ' + error.code);
            }
        } else {
            // –£—Å–ø–µ—à–Ω–æ - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª
            res.writeHead(200, { 'Content-Type': contentType });
            res.end(content, 'utf-8');
        }
    });
});

// –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–ª—É—à–∞–µ–º –¢–û–õ–¨–ö–û –Ω–∞ Wi-Fi –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ (–Ω–µ –Ω–∞ VPN!)
const localIP = getLocalIPAddress();

server.listen(PORT, localIP, () => {
    console.log('\nüè† ========================================');
    console.log('   –£–ö "–ó–µ–ª—ë–Ω–∞—è –î–æ–ª–∏–Ω–∞" - –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
    console.log('========================================\n');
    
    console.log('‚úÖ –ü–†–ò–í–Ø–ó–ö–ê –ö Wi-Fi –ò–ù–¢–ï–†–§–ï–ô–°–£');
    console.log(`   IP –∞–¥—Ä–µ—Å: ${localIP}`);
    console.log('   –¢–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –î–ê–ñ–ï –° –í–ö–õ–Æ–ß–Å–ù–ù–´–ú VPN! üéâ\n');
    
    console.log('üì± –î–æ—Å—Ç—É–ø —Å —ç—Ç–æ–≥–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞:');
    console.log(`   http://localhost:${PORT}`);
    console.log(`   http://127.0.0.1:${PORT}\n`);
    
    console.log('üì± –î–æ—Å—Ç—É–ø —Å –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:');
    console.log(`   http://${localIP}:${PORT}\n`);
    
    console.log('‚öôÔ∏è  –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞:');
    console.log('   1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –∫ —Ç–æ–π –∂–µ WiFi —Å–µ—Ç–∏');
    console.log('   2. –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ');
    console.log(`   3. –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å: http://${localIP}:${PORT}`);
    console.log('   4. –î–æ–±–∞–≤—å—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω\n');
    
    console.log('üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C\n');
    
    console.log('üí° –í–ê–ñ–ù–û:');
    console.log('   - –°–µ—Ä–≤–µ—Ä –ø—Ä–∏–≤—è–∑–∞–Ω –∫ Wi-Fi –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É');
    console.log('   - VPN –ù–ï –≤–ª–∏—è–µ—Ç –Ω–∞ —Ä–∞–±–æ—Ç—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    console.log('   - –ï—Å–ª–∏ IP –∏–∑–º–µ–Ω–∏–ª—Å—è, –∏–∑–º–µ–Ω–∏—Ç–µ WIFI_IP –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞\n');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
server.on('error', (error) => {
    if (error.code === 'EADDRINUSE') {
        console.error(`‚ùå –ü–æ—Ä—Ç ${PORT} —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è!`);
        console.log(`   –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø–æ—Ä—Ç: PORT=3001 node server.js`);
    } else if (error.code === 'EADDRNOTAVAIL') {
        console.error(`‚ùå IP –∞–¥—Ä–µ—Å ${localIP} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!`);
        console.log('   –í–∞—à IP –∞–¥—Ä–µ—Å –∏–∑–º–µ–Ω–∏–ª—Å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π: ipconfig');
        console.log(`   –ò–∑–º–µ–Ω–∏—Ç–µ WIFI_IP –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ server.js –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π IP`);
    } else {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    }
    process.exit(1);
});

// Graceful shutdown
process.on('SIGTERM', () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä...');
    server.close(() => {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        process.exit(0);
    });
});

process.on('SIGINT', () => {
    console.log('\n\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...');
    server.close(() => {
        console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        process.exit(0);
    });
});